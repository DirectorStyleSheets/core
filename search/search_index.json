{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Director Style Sheets (DSS)","text":"<p>Clarification</p> <p>This is the core specification docs. Any supported implementation can be found here.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Stories are a fundamentally human activity. In their most basic sense, sharing stories are the act of compressing complex, multi-sensory ideas into a format that can move others.</p> <p>Unfotunately, with the advent of generative AI, this societal standard has become overly simplified - resulting in a wave of ill-formated stories. Creation has been pushed into a set of \"prompts\" - a text-based explanation of how the story should play out.</p> <p>These tools have created an ecosystem with 4 main issues:</p> <ol> <li>Inconsistent Output: Generative AI commonly produces unpredictable results. Users often have to try multiple times (\"re-roll\") to get satisfactory output, making the process inefficient and frustrating.</li> <li>Interoperability Issues: AI systems use proprietary methods of interfacing, making it hard to integrate them without significant rework. This lack of a common language hinders collaboration and complicates the creation of larger projects with multiple systems.</li> <li>Limited Control: AI mostly relies on simple text prompts, which don\u2019t offer fine control over creative elements like cinematography or character design. This often results in outputs that don\u2019t fully match the user\u2019s expectation.</li> <li>Black Box Effect: Without a standardized way to interact with AI, users can\u2019t see how their inputs are interpreted, leading to unpredictable outcomes. This \"black box\" nature of AI can cause outputs to diverge significantly from the user's intent.</li> </ol> <p>DSS is a framework that attempts to solve these problems by defining a standard way for creators to communicate their ideas, whether they\u2019re working with AI tools or human collaborators. It is designed to be closer to the current process of large scale visual story creation, meeting experts where they are comfortable.</p>"},{"location":"#breakdown","title":"Breakdown","text":"<p>We separate out 2 core concepts of the standard, defined by assets and storyline. These pieces can be thought of as the ingredients to a meal (assets) and the instructions that declare how these come together (storyline).</p>"},{"location":"#assets","title":"Assets","text":"<p>The assets structure is where all of your created content and accomponying information sit. Character model files, dialog audio, sound effects, sets, and more. These components will be referenced by the storyline structure to create your true masterpiece.</p> <p>Dig into the assets definition here.</p>"},{"location":"#storyline","title":"Storyline","text":"<p>The storyline structure is designed to be a timeline of commands that any renderer could implement to display your story.</p> <p>Explore the usable commands here.</p> <p>Further reading can be found in this blog post.</p> <p>Any questions should be directed to cole@pickford.ai.</p>"},{"location":"assets/assets/","title":"Overview","text":"<p>The <code>Asset</code> structure is where any and all information about the story is defined - audio, characters, sets, and more. These components are referenced in the <code>Storyline</code> structure to compose the actual story.</p> <p>Each asset can be generated via an API or hand crafted. The structure must make transparent how each asset was generated for transparency throughout the system.</p>"},{"location":"assets/audio/","title":"Audio","text":"<p>Placeholder example usage:</p> <pre><code>char_dialog_text = \"How does this work?\"\nchar_dialog_audio = ElevenLabsAsset(char_dialog_text, \"eleven_multilingual_v2\")\n\nprint(char_dialog_audio)\n\n{\n    timestamp: DateTime,\n    content: AudioAsset,\n    author: ModelAuthor\n}\n</code></pre>"},{"location":"storyline/cameras/","title":"Cameras","text":"<p>Cameras have 2 main subtypes, shot and movement. These can get very complicated when used and added together. Although functionality is limited to fairly static methods currently, this will expand with time.</p>"},{"location":"storyline/cameras/#shots","title":"Shots","text":"<pre><code>characterGroup: {}\n</code></pre> <pre><code>character: {}\n</code></pre> <pre><code>fetchObject: {}\n</code></pre> <pre><code>pointOfView: {}\n</code></pre>"},{"location":"storyline/cameras/#movements","title":"Movements","text":"<pre><code>follow: {}\n</code></pre> <pre><code>panning: {}\n</code></pre> <pre><code>still: {}\n</code></pre> <pre><code>target: {}\n</code></pre> <pre><code>track: {}\n</code></pre> <pre><code>zoom: {}\n</code></pre>"},{"location":"storyline/characters/","title":"Characters","text":"<p>Characters are the lifeblood of any story. They should be able to interact with their world and express themeselves. Each of the following commands allow a renderer to trigger character actions.</p>"},{"location":"storyline/characters/#audio","title":"Audio","text":"<pre><code>talk: {\n    generationdMethod: obj:\n    assetPath: str,\n    character: str,\n    talkingTo: str,\n    text: str\n}\n</code></pre>"},{"location":"storyline/characters/#interactions","title":"Interactions","text":"<pre><code>handover: {}\n</code></pre> <pre><code>look: {}\n</code></pre> <pre><code>pickUp: {}\n</code></pre> <pre><code>putDown: {}\n</code></pre> <pre><code>openDoor: {}\n</code></pre> <pre><code>closeDoor: {}\n</code></pre>"},{"location":"storyline/characters/#movement","title":"Movement","text":"<pre><code>run: {}\n</code></pre> <pre><code>sit: {}\n</code></pre> <pre><code>stand: {}\n</code></pre> <pre><code>turn: {}\n</code></pre> <pre><code>walk: {}\n</code></pre>"},{"location":"storyline/scenes/","title":"Scenes","text":"<p>Every scene has clearly defined physical components that need to be defined. Each of the following allow a renderer to action these pieces.</p>"},{"location":"storyline/scenes/#audio","title":"Audio","text":"<pre><code>playSoundEffect: {\n    asset: obj,\n}\n</code></pre> <pre><code>playMusic: {\n    asset: obj,\n}\n</code></pre>"},{"location":"storyline/scenes/#doors","title":"Doors","text":"<pre><code>lockDoor: {\n    doorID: str\n}\n</code></pre> <pre><code>unlockDoor: {\n    doorID: str\n}\n</code></pre>"},{"location":"storyline/scenes/#lighting","title":"Lighting","text":"<pre><code>setLighting: {\n    timeofDay: str,\n    artificialLights: bool\n}\n</code></pre>"},{"location":"storyline/scenes/#locations","title":"Locations","text":"<pre><code>setLocation: {\n    assetPath: str\n}\n</code></pre>"},{"location":"storyline/scenes/#props","title":"Props","text":"<pre><code>spawnProp: {\n    uniqueID: str,\n    asset: obj,\n    placementZone: str,\n    placementMark: str\n}\n</code></pre>"},{"location":"storyline/scenes/#characters","title":"Characters","text":"<pre><code>spawnCharacter: {\n    uniqueID: str,\n    asset: obj,\n    placementZone: str,\n    placementMark: str\n}\n</code></pre>"},{"location":"storyline/storyline/","title":"Overview","text":"<p>The <code>Storyline</code> is a structure that any renderer can use to play a story. This structure is defined as a timeline of commands that reference the <code>Asset</code> structure for any required components.</p> <p>This structure starts with a base object and some organizational components as seen in the example below.</p> <pre><code>{\n    scenes: [\n        {\n            name: str,\n            description: str,\n            commandGroups: [\n                {\n                    timestamp: Optional&lt;float&gt;,\n                    commands: List&lt;DSSCommand&gt;\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>In further doc iterations, these object references will become more crystalized. But currently, the important information is:</p> <ul> <li>If a timestamp if <code>null</code>, it will be played directly after the previous command.</li> <li>DSSCommand will be the base type of all commands</li> </ul>"},{"location":"storyline/temp_pickford/","title":"Temp pickford","text":"<ul> <li>Scene Setting</li> <li>Scene Description</li> <li>Camera Direction</li> <li>Character Movement</li> <li>Dialog</li> <li>Transition</li> <li>Character</li> </ul>"},{"location":"storyline/temp_rsmg/","title":"Temp rsmg","text":"<ul> <li> <p>[General]</p> </li> <li> <p>Add Prop</p> </li> <li>Close Door</li> <li>Enable Set</li> <li>Handover</li> <li>Look</li> <li>Open Door</li> <li>Pick</li> <li>Play Animation</li> <li>Play Audio</li> <li>Put</li> <li>Run</li> <li>Set Channel Volume</li> <li>Set Emotion</li> <li>Set Light</li> <li>Sit</li> <li>Spawn</li> <li>Stand</li> <li>Talk</li> <li>Turn</li> <li> <p>Walk</p> </li> <li> <p>[Scene]</p> </li> <li> <p>Show Text</p> </li> <li> <p>[Camera]</p> </li> <li>Character Group</li> <li>Character</li> <li>Fetch Object</li> <li>Follow</li> <li>Panning</li> <li>Point of View</li> <li>Still</li> <li>Target</li> <li>Track</li> <li>Zoom</li> </ul>"}]}